8.
Given the head of a singly linked list, return true if it is a palindrome or false otherwise. 
Example 1: 
Input: head = [1,2,2,1] 
Output: true
Example 2:
Input: head = [1,2]
Output: false
Input: R->A->D->A->R->NULL
Output: Yes
Input: C->O->D->E->NULL
Output: No

CODE:

#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    char data;
    struct Node* next;
} Node;

Node* createNode(char data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

int isPalindrome(Node* head) {
    Node* slow = head;
    Node* fast = head;
    Node* prev = NULL;
    Node* temp = NULL;

    while (fast && fast->next) {
        fast = fast->next->next;
        temp = slow;
        slow = slow->next;
        temp->next = prev;
        prev = temp;
    }

    if (fast) slow = slow->next;

    while (slow) {
        if (slow->data!= prev->data) return 0;
        slow = slow->next;
        prev = prev->next;
    }

    return 1;
}

int main() {
    Node* head = createNode('R');
    head->next = createNode('A');
    head->next->next = createNode('D');
    head->next->next->next = createNode('A');
    head->next->next->next->next = createNode('R');

    printf("Is palindrome? %s\n", isPalindrome(head)? "Yes" : "No");

    return 0;
}

OUTPUT :

Is palindrome? Yes
