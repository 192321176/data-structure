21.
	Implement a first in first out (FIFO) queue using only two stacks. The 
implemented queue should support all the functions of a normal queue (push, 
peek, pop, and empty).
Implement the MyQueue class:
1. void push(int x) Pushes element x to the back of the queue.
2. int pop() Removes the element from the front of the queue and returns it.
3. int peek() Returns the element at the front of the queue.
4. boolean empty() Returns true if the queue is empty, false otherwise.
Input
["MyQueue", "push", "push", "peek", "pop", "empty"]
[[], [1], [2], [], [], []]
Output
[null, null, null, 1, 1, false]

Explanation
MyQueue myQueue = new MyQueue();
myQueue.push(1); // queue is: [1]
myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)
myQueue.peek(); // return 1
myQueue.pop(); // return 1, queue is [2]
myQueue.empty(); // return false

CODE:

#include <stdio.h>
#include <stdlib.h>
#define SIZE 5

int stack1[SIZE];
int top1 = -1;

int stack2[SIZE];
int top2 = -1;

void push(int x) {
    if (top1 == SIZE - 1) {
        printf("Queue is full.\n");
        return;
    }
    stack1[++top1] = x;
}

int pop() {
    if (top1 == -1 && top2 == -1) {
        printf("Queue is empty.\n");
        return -1;
    }
    if (top2 == -1) {
        while (top1 != -1) {
            stack2[++top2] = stack1[top1--];
        }
    }
    int val = stack2[top2--];
    return val;
}

int peek() {
    if (top1 == -1 && top2 == -1) {
        printf("Queue is empty.\n");
        return -1;
    }
    if (top2 == -1) {
        while (top1 != -1) {
            stack2[++top2] = stack1[top1--];
        }
    }
    return stack2[top2];
}

int empty() {
    return (top1 == -1 && top2 == -1);
}

int main() {
    push(1);
    push(2);
    printf("%d\n", peek()); 
    printf("%d\n", pop());
    printf("%s\n", empty() ? "true" : "false"); 
    return 0;
}


OUTPUT:

1
1
false
