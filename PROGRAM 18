18.
	Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
1. Open brackets must be closed by the same type of brackets.
2. Open brackets must be closed in the correct order.
Input: s = "()"
Output: true
Input: s = "()[]{}"
Output: true
Input: s = "(]"
Output: false
Input: s = "([)]"
Output: false
Input: s = "{[]}"
Output: true

CODE:

#include <stdio.h>
#include <stdbool.h>

bool isValid(char *s) {
   
}

int main() {
    char str1[] = "()";
    char str2[] = "()[]{}";
    char str3[] = "(]";
    char str4[] = "([)]";
    char str5[] = "{[]}";
  
    printf("%s: %s\n", str1, isValid(str1) ? "true" : "false");
    printf("%s: %s\n", str2, isValid(str2) ? "true" : "false");
    printf("%s: %s\n", str3, isValid(str3) ? "true" : "false");
    printf("%s: %s\n", str4, isValid(str4) ? "true" : "false");
    printf("%s: %s\n", str5, isValid(str5) ? "true" : "false");

    return 0;
}


OUTPUT:

(): true
()[]{}: true
(]: true
([)]: true
([)]: true
{[]}: true
